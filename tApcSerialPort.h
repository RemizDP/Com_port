#pragma once
#include <string>       // работа с типом string

// допустимые значения baudrate было решено ограничить набором enum
enum class enBaudRate : uint32_t {
  b1200 = 1200,
  b2400 = 2400,
  b4800 = 4800,
  b9600 = 9600,
  b19200 = 19200,
  b38400 = 38400,
  b57600 = 57600,
  b115200 = 115200};

class TApcSerialPort{

  public:
    /* конструктор с инициализацией дескриптора значением -1 (порт закрыт)*/
    TApcSerialPort();
    /* деструктор с закрытием порта. Если дескриптор отрицательный, выводит собщение об ошибке*/
    ~TApcSerialPort();

    /* предназначена для извлечения атрибутов (настроек) по дескриптору 
    с помощью ф-ции tcgetattr или проверки дескриптора*/
    int get_handle();

    /* открытие файла порта на чтение и запись с отключением режима терминала.
    Исторически по последовательному порту к машинам на UNIX подключались терминалы,
    поэтому функции терминала предусмотрены и сейчас*/
    int file_open(const std::string astrPortPathName);

    /* настройка порта по схеме 8N1, отключение ф-ций терминала с помощью флагов, установка baudrate (в линукс можно выставить разные baudrate для чтения и записи)
    С помощью параметров MIN и TIME можно изменять режим чтения. Предусмотрено 4 таких таких режима:
    Если MIN == 0, TIME == 0, то режим немедленного возврата, т.е. будут доступны только уже принятые символы (в моем случае не влияет, максимальное число возвращаемых символов не изменилось)
    Если MIN > 0,  TIME == 0, то режим блокирующего чтения (не очень интересно,т.к. при отсутствии готовых для чтения символов будет бесконечно висеть в ожидании)
    Если MIN == 0, TIME > 0, то возврат по крайней мере одного полученного символа или произойдет истечение времени TIME
    Если MIN > 0, TIME > 0, то посимвольный таймаут для чтения, вернется по меньшей мере MIN символов
    Подробнее: http://unixwiz.net/techtips/termios-vmin-vtime.html*/
    int configure(enBaudRate adwBaudRate);

    /* запись в порт и чтение из порта, реализованы с использованием структуры pollfd. Функция poll использует эту структуру,
    ожидает наступление событий (в нашем случае POLLIN -- символы готовы для прочтения с порта; и POLLOUT символы готовы для записи в порт)*/
    int write(uint8_t* apBuf, size_t astSize, uint32_t adwTimeout, size_t& astWritten);
    int read(uint8_t* apBuf, size_t astSize, uint32_t adwTimeout, size_t& astRlen);
  private:
   int m_FileHandle;
};
